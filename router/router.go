package router

import (
	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"net/http"
	_ "tianzhuo-manage/docs" // docs is generated by Swag CLI, you have to import it.
	"tianzhuo-manage/handler"
	"tianzhuo-manage/handler/report"
	"tianzhuo-manage/handler/sd"
	"tianzhuo-manage/handler/user"
	"tianzhuo-manage/pkg/captcha"
	"tianzhuo-manage/router/middleware"
	"time"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {

	g.GET("/test-shutdown", func(c *gin.Context) {
		time.Sleep(5 * time.Second)
		handler.SendResponse(c, nil, "bbbb")
	})

	g.GET("/captcha", func(c *gin.Context) {
		captcha.Captcha(c, 4)
	})

	g.POST("/upload", user.Upload)

	// Middleware.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// swagger api docs
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// pprof router
	pprof.Register(g)

	// api for authentication functionalities
	g.POST("/login", user.Login)

	g.POST("/jmeter", user.Jmeter)

	// The user handlers, requiring authentication
	u := g.Group("/v1/user")
	u.Use(middleware.AuthMiddleware())
	{
		u.POST("", user.Create)
		u.DELETE("/:id", user.Delete)
		u.PUT("/:id", user.Update)
		u.GET("", user.List)
		u.GET("/get/:username", user.Get)
		u.GET("/export", user.Export)
		u.POST("/import", user.Import)
	}

	// The health check handlers
	svcd := g.Group("/sd")
	{
		svcd.GET("/health", sd.HealthCheck)
		svcd.GET("/disk", sd.DiskCheck)
		svcd.GET("/cpu", sd.CPUCheck)
		svcd.GET("/ram", sd.RAMCheck)
	}

	g.POST("/submit/sh", report.Report)

	return g
}
